#!/usr/bin/python

import argparse
import csv
import multiprocessing
import os
import sys

import mapnik2

import invar

mapnik2.register_fonts('/Library/Fonts/')
mapnik2.register_fonts('/usr/share/fonts')

DEFAULT_ZOOM = 16

def render_frames(tile_parameters, config, tile_dir, zoom, process_count):
    """
    Render a series of centered frames.
    """
    if not os.path.isdir(tile_dir):
         os.mkdir(tile_dir)

    tile_queue = multiprocessing.JoinableQueue()
    tile_count = 0

    for i, t in enumerate(tile_parameters):
        tile_queue.put(t)
        tile_count += 1

    print 'Using %i processes to render %i tiles' % (process_count, tile_count)

    processes = []

    for i in range(process_count):
        renderer = invar.FrameRenderer(tile_queue, config)
        renderer.start()

        processes.append(renderer)

    try:
        tile_queue.join()
    except KeyboardInterrupt:
        for p in processes:
            p.terminate()

def get_tile_parameters_from_csv(filename, zoom, name_column=None):
    """
    Finds latitude and longitude columns in a CSV and extracts coordinate pairs from them.
    """
    coordinates = []

    with open(filename, 'rU') as f:
        rows = csv.reader(f)
        headers = rows.next()
        headers = [s.lower().strip() for s in headers]

        latitude_index = None
        longitude_index = None
        name_index = None

        for n in ['latitude', 'lat', 'y']:
            if n in headers:
                latitude_index = headers.index(n)

        if latitude_index < 0:
            sys.exit('Unable to find latitude column in CSV.')

        for n in ['longitude', 'lon', 'x']:
            if n in headers:
                longitude_index = headers.index(n)

        if longitude_index < 0:
            sys.exit('Unable to find longitude column in CSV.')

        if name_column:
            name_index = headers.index(name_column)

            if name_index < 0:
                sys.exit('Column "%s" does not exist in the input CSV.' % name_column)

        for i, row in enumerate(rows):
            try:
                latitude = float(row[latitude_index].strip())
                longitude = float(row[longitude_index].strip())
            except ValueError:
                print 'Skipping non-numeric latitude/longitude: %s, %s' % (row[latitude_index], row[longitude_index])
                continue

            if name_index:
                name = row[name_index]
            else:
                name = str(i)

            coordinates.append(('%s.png' % name, latitude, longitude, zoom))

    return coordinates

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Render centered frames from a Mapnik2 XML configuration file. Accepts either a single latitude/longitude pair or the name of a CSV file containing appropriate columns.')
    parser.add_argument('config', help="Mapnik2 XML configuration file.")
    parser.add_argument('tile_dir', help="Destination directory for rendered tiles.")
    parser.add_argument('latitude',  help='Latitude to center rendering on.', type=float, nargs='?')
    parser.add_argument('longitude', help='Longitude to center rendering on.', type=float, nargs='?')
    parser.add_argument('-z', '--zoom', help="Zoom level to render.", type=int, default=DEFAULT_ZOOM)
    parser.add_argument('-p', '--process_count', help="Number of rendering processes to create.", type=int, default=invar.DEFAULT_PROCESS_COUNT)
    parser.add_argument('--csv', help='A CSV file containing at latitude and longitude columns.')
    parser.add_argument('-n', '--name', help='The name of a column in the CSV file to use as a filename (not including extension).')

    args = parser.parse_args()

    if args.csv:
        tile_parameters = get_tile_parameters_from_csv(args.csv, args.zoom, args.name)
    else:
        if not args.latitude or not args.longitude:
            sys.exit('You must specify a latitude and longitude unless providing the name of a CSV.')

        tile_parameters = [('frame.png', args.latitude, args.longitude, args.zoom)]

    render_frames(tile_parameters, args.config, args.tile_dir, args.zoom, args.process_count)

