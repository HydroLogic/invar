#!/usr/bin/python

import argparse
import csv
import multiprocessing
import os
import sys

import mapnik2

import invar

mapnik2.register_fonts('/Library/Fonts/')
mapnik2.register_fonts('/usr/share/fonts')

DEFAULT_ZOOM = 16

def render_frames(coordinates, config, tile_dir, zoom, process_count):
    """
    Render a series of centered frames.
    """
    if not os.path.isdir(tile_dir):
         os.mkdir(tile_dir)

    tile_queue = multiprocessing.JoinableQueue()

    for i, c in enumerate(coordinates):
        filename = os.path.join(tile_dir, '%i.png' % i)

        tile_queue.put((filename, c[0], c[1], zoom))

    print 'Using %i processes to render %i tiles' % (process_count, tile_queue.qsize())

    processes = []

    for i in range(process_count):
        renderer = invar.FrameRenderer(tile_queue, config)
        renderer.start()

        processes.append(renderer)

    try:
        tile_queue.join()
    except KeyboardInterrupt:
        for p in processes:
            p.terminate()

def get_coordinates_from_csv(filename):
    """
    Finds latitude and longitude columns in a CSV and extracts coordinate pairs from them.
    """
    coordinates = []

    with open(filename, 'rU') as f:
        rows = csv.reader(f)
        headers = rows.next()
        headers = [s.lower().strip() for s in headers]

        latitude_index = None
        longitude_index = None

        for n in ['latitude', 'lat', 'y']:
            if n in headers:
                latitude_index = headers.index(n)

        if not latitude_index:
            sys.exit('Unable to find latitude column in CSV.')

        for n in ['longitude', 'lon', 'x']:
            if n in headers:
                longitude_index = headers.index(n)

        if not longitude_index:
            sys.exit('Unable to find longitude column in CSV.')

        for row in rows:
            try:
                latitude = float(row[latitude_index].strip())
                longitude = float(row[longitude_index].strip())
            except ValueError:
                print 'Skipping non-numeric latitude/longitude: %s, %s' % (row[latitude_index], row[longitude_index])
                continue

            coordinates.append((latitude, longitude))

    return coordinates

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Render centered frames from a Mapnik2 XML configuration file. Accepts either a single latitude/longitude pair or the name of a CSV file containing appropriate columns.')
    parser.add_argument('config', help="Mapnik2 XML configuration file.")
    parser.add_argument('tile_dir', help="Destination directory for rendered tiles.")
    parser.add_argument('latitude',  help='Latitude to center rendering on.', nargs='?')
    parser.add_argument('longitude', help='Longitude to center rendering on.', nargs='?')
    parser.add_argument('-z', '--zoom', help="Zoom level to render.", type=int, default=DEFAULT_ZOOM)
    parser.add_argument('-p', '--process_count', help="Number of rendering processes to create.", type=int, default=invar.DEFAULT_PROCESS_COUNT)
    parser.add_argument('--csv', help='A CSV file containing at latitude and longitude columns.')

    args = parser.parse_args()

    if args.csv:
        coordinates = get_coordinates_from_csv(args.csv)
    else:
        if not args.latitude or args.longitude:
            sys.exit('You must specify a latitude and longitude unless providing the name of a CSV.')

        coordinates = [(args.latitude, args.longitude)]

    render_frames(coordinates, args.config, args.tile_dir, args.zoom, args.process_count)

